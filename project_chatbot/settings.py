"""
Django settings for project_chatbot project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-replace-this-with-your-own-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# Add domains to allowed hosts via env var, separated by commas
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',  # Django Channels for WebSockets
    'chatbot',  # Our chatbot app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Whitenoise Middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project_chatbot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project_chatbot.wsgi.application'
ASGI_APPLICATION = 'project_chatbot.asgi.application'

# Channel layers configuration for WebSockets
# Get Redis configuration from environment if available
REDIS_HOST = os.getenv('REDIS_HOST', '127.0.0.1')
REDIS_PORT = os.getenv('REDIS_PORT', '6379')

# Use in-memory channel layer for both development and small-scale deployments
# This works well for Cloud Run instances with minimal traffic
# Switch to Redis for high-traffic scenarios or multiple instances
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

# If Redis is configured, use Redis channel layer instead
if REDIS_HOST and REDIS_PORT and not (REDIS_HOST == '127.0.0.1' and DEBUG):
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                "hosts": [(REDIS_HOST, int(REDIS_PORT))],
            },
        },
    }

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DB_ENGINE = os.getenv('DB_ENGINE', 'django.db.backends.sqlite3')
DB_NAME = os.getenv('DB_NAME', BASE_DIR / 'db.sqlite3')
DB_USER = os.getenv('DB_USER', '')
DB_PASSWORD = os.getenv('DB_PASSWORD', '')
DB_HOST = os.getenv('DB_HOST', '')
if '#' in DB_HOST:  # Add this block to clean DB_HOST
    DB_HOST = DB_HOST.split('#')[0].strip()
DB_PORT = os.getenv('DB_PORT', '5432')
if '#' in DB_PORT:
    DB_PORT = DB_PORT.split('#')[0].strip()
# Default PostgreSQL port

# Use environment variable to determine which database to use
DB_TYPE = os.getenv('DB_TYPE', 'sqlite')

if DB_TYPE == 'postgresql':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME', 'pm_chatbot'),
            'USER': os.getenv('DB_USER', 'postgres'),
            'PASSWORD': os.getenv('DB_PASSWORD', ''),
            'HOST': DB_HOST,  # Use the cleaned DB_HOST variable
            'PORT': DB_PORT,  # Use the cleaned DB_PORT variable
        }
    }
elif DB_TYPE == 'mysql':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.getenv('DB_NAME', 'pm_chatbot'),
            'USER': os.getenv('DB_USER', 'root'),
            'PASSWORD': os.getenv('DB_PASSWORD', ''),
            'HOST': DB_HOST,  # Use the cleaned DB_HOST variable
            'PORT': DB_PORT,  # Use the cleaned DB_PORT variable
            'OPTIONS': {
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
                'charset': 'utf8mb4',
            }
        }
    }
else:
    # Default to SQLite for development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "staticfiles" # Added for Whitenoise
# Updated to use the existing staticfiles directory instead of the non-existent static directory
STATICFILES_DIRS = []

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# API Key settings from .env file
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
GOOGLE_SHEETS_CREDENTIALS_FILE = os.getenv('GOOGLE_SHEETS_CREDENTIALS_FILE')
GOOGLE_SHEETS_PROJECT_DB = os.getenv('GOOGLE_SHEETS_PROJECT_DB')

# Get Gemini API key from .env
# Parse it from the .env file since it's commented out
def parse_gemini_api_key():
    try:
        with open(os.path.join(BASE_DIR, '.env')) as env_file:
            for line in env_file:
                if 'Gemini API' in line and '=' in line:
                    key = line.split('=')[1].strip()
                    return key
    except Exception as e:
        print(f"Error parsing Gemini API key: {e}")
    return None

GOOGLE_GEMINI_API_KEY = os.getenv('GOOGLE_GEMINI_API_KEY', parse_gemini_api_key())

# Security settings
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'

# Configuration for additional Google Sheets
ADDITIONAL_GOOGLE_SHEETS = {}

# If ADDITIONAL_SHEETS is defined in .env as a comma-separated list of name:id pairs,
# parse it and add to ADDITIONAL_GOOGLE_SHEETS
if os.getenv('ADDITIONAL_SHEETS'):
    sheets = os.getenv('ADDITIONAL_SHEETS').split(',')
    for sheet in sheets:
        if ':' in sheet:
            name, sheet_id = sheet.strip().split(':', 1)
            ADDITIONAL_GOOGLE_SHEETS[name] = sheet_id

# Cache configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'project-management-chatbot',
    }
}

# Cache timeouts (in seconds)
GOOGLE_SHEETS_CACHE_TIMEOUT = 300  # 5 minutes
GOOGLE_SEARCH_CACHE_TIMEOUT = 1800 # 30 minutes, new setting for search cache
GOOGLE_SEARCH_RATE_LIMIT_RETRIES = 3 # New setting for search retries
GOOGLE_SEARCH_RATE_LIMIT_COOLDOWN = 2 # New setting for search cooldown in seconds

# Database query configuration
USE_SQL_DATABASE = os.getenv('USE_SQL_DATABASE', 'False').lower() == 'true'  # Set to True to use SQL instead of Google Sheets
SQL_QUERY_ROW_LIMIT = 1000  # Maximum number of rows to return for safety

# Google Search API Configuration
GOOGLE_SEARCH_API_KEY = os.environ.get('GOOGLE_SEARCH_API_KEY', '')
GOOGLE_SEARCH_ENGINE_ID = os.environ.get('GOOGLE_SEARCH_ENGINE_ID', '')
ENABLE_WEB_SEARCH = os.environ.get('ENABLE_WEB_SEARCH', 'True').lower() == 'true'

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'google_search.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'chatbot.utils.google_search': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'chatbot.utils.chatbot_service': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}